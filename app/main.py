import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from datetime import datetime, timedelta
import io


# ==========================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# ==========================
@st.cache_data
def generate_data(n_fact_days=60, n_forecast_days=30):
    products = ["Candy A", "Candy B", "Candy C"]
    regions = ["north", "south", "east", "west"]

    today = datetime.today().date()
    fact_dates = pd.date_range(today - timedelta(days=n_fact_days), periods=n_fact_days)
    forecast_dates = pd.date_range(today + timedelta(days=1), periods=n_forecast_days)

    rows = []
    for product in products:
        for region in regions:
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            for d in fact_dates:
                y = np.random.randint(80, 150)
                yhat = y + np.random.randint(-5, 5)
                rows.append([d, product, region, y, yhat, yhat - 10, yhat + 10])

            # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–∫—Ç–∞ –Ω–µ—Ç)
            for d in forecast_dates:
                yhat = np.random.randint(90, 140)
                rows.append([d, product, region, None, yhat, yhat - 15, yhat + 15])

    df = pd.DataFrame(
        rows,
        columns=[
            "date",
            "product_name",
            "region",
            "y",
            "yhat",
            "yhat_lower",
            "yhat_upper",
        ],
    )
    return df


@st.cache_data
def generate_model_metrics():
    rows = []
    for product in ["Candy A", "Candy B", "Candy C"]:
        for region in ["north", "south", "east", "west"]:
            rows.append(
                [
                    "prophet",
                    np.round(np.random.uniform(5, 10), 2),  # mae
                    np.round(np.random.uniform(7, 12), 2),  # rmse
                    np.round(np.random.uniform(1, 3), 2),  # wape
                    np.round(np.random.uniform(15, 30), 2),  # summ_error_3month
                    product,
                    region,
                ]
            )
    df = pd.DataFrame(
        rows,
        columns=[
            "model_name",
            "mae",
            "rmse",
            "wape",
            "summ_error_3month",
            "product_name",
            "region",
        ],
    )
    return df


# ==========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ==========================
st.set_page_config(
    page_title="Amiri Forecasting Dashboard",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üìä Amiri Forecasting Dashboard")

# ==========================
# –î–∞–Ω–Ω—ã–µ
# ==========================
forecast_df = generate_data()
metrics_df = generate_model_metrics()

# ==========================
# –§–∏–ª—å—Ç—Ä—ã (sidebar)
# ==========================
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

product = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", forecast_df["product_name"].unique())
region = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", forecast_df["region"].unique())
horizon = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 90, 30)

filtered_df = forecast_df[
    (forecast_df["product_name"] == product) & (forecast_df["region"] == region)
].copy()

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º
filtered_df = filtered_df.sort_values("date").tail(horizon)

# ==========================
# –í–∫–ª–∞–¥–∫–∏
# ==========================
tab1, tab2 = st.tabs(["üìà –ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç", "üìâ –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader(f"–ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç –¥–ª—è {product} ({region})")

    if filtered_df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    else:
        today = datetime.today().date()

        # –°—Ç–∏–ª–∏ –æ—Å–µ–π (—á—ë—Ç–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ —Ç—ë–º–Ω–æ–π —Ç–µ–º–µ)
        x_axis = alt.X(
            "date:T",
            title="üìÖ –î–∞—Ç–∞",
            axis=alt.Axis(
                labelFontSize=12,
                titleFontSize=16,
                titleColor="white",
                labelColor="white",
            ),
        )
        y_axis = alt.Y(
            "y:Q",
            title="üì¶ –ü—Ä–æ–¥–∞–∂–∏",
            axis=alt.Axis(
                labelFontSize=12,
                titleFontSize=16,
                titleColor="white",
                labelColor="white",
            ),
        )

        # –§–∞–∫—Ç
        line_fact = (
            alt.Chart(filtered_df.dropna(subset=["y"]))
            .mark_line(color="steelblue")
            .encode(x=x_axis, y=y_axis, tooltip=["date", "y"])
        )

        # –ü—Ä–æ–≥–Ω–æ–∑
        line_forecast = (
            alt.Chart(filtered_df)
            .mark_line(color="orange", strokeDash=[5, 5])
            .encode(
                x="date:T",
                y=alt.Y("yhat:Q", title="üì¶ –ü—Ä–æ–¥–∞–∂–∏"),
                tooltip=["date", "yhat"],
            )
        )

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞
        band = (
            alt.Chart(filtered_df)
            .mark_area(opacity=0.2, color="orange")
            .encode(x="date:T", y="yhat_lower:Q", y2="yhat_upper:Q")
        )

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
        today_rule = (
            alt.Chart(pd.DataFrame({"date": [today]}))
            .mark_rule(strokeDash=[2, 2], color="red")
            .encode(x="date:T")
        )

        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        chart = (line_fact + line_forecast + band + today_rule).properties(
            width=900, height=400
        )

        st.altair_chart(chart, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        st.dataframe(filtered_df, use_container_width=True)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
            data=filtered_df.to_csv(index=False).encode("utf-8"),
            file_name=f"forecast_{product}_{region}.csv",
            mime="text/csv",
        )

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel
        towrite = io.BytesIO()
        with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
            filtered_df.to_excel(writer, index=False, sheet_name="Forecast")
        towrite.seek(0)

        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
            data=towrite,
            file_name=f"forecast_{product}_{region}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

with tab2:
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")

    metrics_filtered = metrics_df[
        (metrics_df["product_name"] == product) & (metrics_df["region"] == region)
    ]

    if metrics_filtered.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.")
    else:
        st.dataframe(metrics_filtered, use_container_width=True)
