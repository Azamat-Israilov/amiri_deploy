import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import io
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import test_connection
from app.data_access import (
    fetch_products_and_regions,
    fetch_forecast_vs_actual,
    fetch_metrics,
)


# ==========================
# Fallback data for demo purposes
# ==========================
@st.cache_data
def get_demo_products_regions():
    """Return demo products and regions for fallback"""
    return ["Candy A", "Candy B", "Candy C"], ["north", "south", "east", "west"]


# ==========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ==========================
st.set_page_config(
    page_title="Amiri Forecasting Dashboard",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üìä Amiri Forecasting Dashboard")

# ==========================
# –î–∞–Ω–Ω—ã–µ
# ==========================
db_ok = test_connection()
if db_ok:
    try:
        products, regions = fetch_products_and_regions()
    except Exception:
        products, regions = get_demo_products_regions()
else:
    products, regions = get_demo_products_regions()

# ==========================
# –§–∏–ª—å—Ç—Ä—ã (sidebar)
# ==========================
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

product = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", products)
region = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", regions)
horizon = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 90, 30)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
if db_ok:
    try:
        filtered_df = fetch_forecast_vs_actual(product, region, horizon)
        metrics_df = fetch_metrics(product, region)
    except Exception:
        st.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
        filtered_df = pd.DataFrame()
        metrics_df = pd.DataFrame()
else:
    st.info("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
    filtered_df = pd.DataFrame()
    metrics_df = pd.DataFrame()

# ==========================
# –í–∫–ª–∞–¥–∫–∏
# ==========================
tab1, tab2 = st.tabs(["üìà –ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç", "üìâ –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader(f"–ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç –¥–ª—è {product} ({region})")

    if filtered_df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    else:
        today = datetime.today().date()

        # –°–æ–∑–¥–∞–µ–º Plotly –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()

        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        actual_data = filtered_df.dropna(subset=["y"])
        if not actual_data.empty:
            fig.add_trace(
                go.Scatter(
                    x=actual_data["date"],
                    y=actual_data["y"],
                    mode="lines+markers",
                    name="–§–∞–∫—Ç",
                    line=dict(color="#1f77b4", width=3),
                    marker=dict(size=4),
                    hovertemplate="<b>–§–∞–∫—Ç</b><br>–î–∞—Ç–∞: %{x}<br>–ü—Ä–æ–¥–∞–∂–∏: %{y}<extra></extra>",
                )
            )

        # –ü—Ä–æ–≥–Ω–æ–∑
        forecast_data = filtered_df.dropna(subset=["yhat"])
        if not forecast_data.empty:
            fig.add_trace(
                go.Scatter(
                    x=forecast_data["date"],
                    y=forecast_data["yhat"],
                    mode="lines+markers",
                    name="–ü—Ä–æ–≥–Ω–æ–∑",
                    line=dict(color="#ff7f0e", width=3, dash="dash"),
                    marker=dict(size=4),
                    hovertemplate="<b>–ü—Ä–æ–≥–Ω–æ–∑</b><br>–î–∞—Ç–∞: %{x}<br>–ü—Ä–æ–¥–∞–∂–∏: %{y}<extra></extra>",
                )
            )

            # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if not forecast_data.dropna(subset=["yhat_lower", "yhat_upper"]).empty:
                fig.add_trace(
                    go.Scatter(
                        x=forecast_data["date"],
                        y=forecast_data["yhat_upper"],
                        mode="lines",
                        line=dict(width=0),
                        showlegend=False,
                        hoverinfo="skip",
                    )
                )

                fig.add_trace(
                    go.Scatter(
                        x=forecast_data["date"],
                        y=forecast_data["yhat_lower"],
                        mode="lines",
                        line=dict(width=0),
                        fill="tonexty",
                        fillcolor="rgba(255, 127, 14, 0.2)",
                        name="–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
                        hoverinfo="skip",
                    )
                )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title=f"–ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç –¥–ª—è {product} ({region})",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–ü—Ä–æ–¥–∞–∂–∏",
            template="plotly_white",
            height=500,
            hovermode="x unified",
            legend=dict(
                orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1
            ),
            xaxis=dict(
                showgrid=True,
                gridwidth=1,
                gridcolor="lightgray",
                tickformat="%d %b",
                # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã –≥–¥–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                range=[filtered_df["date"].min(), filtered_df["date"].max()],
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–æ–≤
                nticks=8,
            ),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor="lightgray"),
        )

        st.plotly_chart(fig, width="stretch")

        # –¢–∞–±–ª–∏—Ü–∞
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        st.dataframe(filtered_df, width="stretch")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
            data=filtered_df.to_csv(index=False).encode("utf-8"),
            file_name=f"forecast_{product}_{region}.csv",
            mime="text/csv",
        )

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel
        towrite = io.BytesIO()
        with pd.ExcelWriter(towrite, engine="xlsxwriter") as writer:
            filtered_df.to_excel(writer, index=False, sheet_name="Forecast")
        towrite.seek(0)

        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
            data=towrite,
            file_name=f"forecast_{product}_{region}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )


with tab2:
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")

    metrics_filtered = (
        metrics_df[
            (metrics_df["product_name"] == product) & (metrics_df["region"] == region)
        ]
        if not metrics_df.empty
        else metrics_df
    )

    if metrics_filtered.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.")
    else:
        st.dataframe(metrics_filtered, width="stretch")
