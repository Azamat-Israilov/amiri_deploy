import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
import altair as alt

st.set_page_config(page_title="Amiri Forecasting UI", layout="wide")

# üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown(
    """
    <h1 style='text-align: center; color: #FF4B4B; font-size: 48px;'>
        üç¨ Amiri Forecasting UI
    </h1>
    <p style='text-align: center; color: gray; font-size:18px;'>
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ vs —Ñ–∞–∫—Ç–∞ –ø–æ —Å–ø—Ä–æ—Å—É –Ω–∞ –∫–æ–Ω—Ñ–µ—Ç—ã
    </p>
    """,
    unsafe_allow_html=True,
)

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.sidebar.header("üìÖ –§–∏–ª—å—Ç—Ä –¥–∞—Ç")
start_date = st.sidebar.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞")
end_date = st.sidebar.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
if st.sidebar.button("üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (—Å–∏–Ω—Ç–µ—Ç–∏–∫–∞)"):
    dates = pd.date_range(start_date, end_date)
    forecast = np.random.randint(100, 200, size=len(dates))
    actual = forecast + np.random.randint(-10, 10, size=len(dates))

    df = pd.DataFrame({"date": dates, "forecast": forecast, "actual": actual})

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
    st.session_state["forecast_data"] = df

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ ---
if "forecast_data" in st.session_state:
    df = st.session_state["forecast_data"]

    # --- –ì—Ä–∞—Ñ–∏–∫ ---
    st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç")
    df_melted = df.melt("date", var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", value_name="–ó–Ω–∞—á–µ–Ω–∏–µ")

    chart = (
        alt.Chart(df_melted)
        .mark_line(point=True)
        .encode(
            x=alt.X("date:T", title="–î–∞—Ç–∞"),
            y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            color=alt.Color("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:N", legend=alt.Legend(title="–õ–∏–Ω–∏–∏")),
            tooltip=["date:T", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:N", "–ó–Ω–∞—á–µ–Ω–∏–µ:Q"],
        )
        .properties(width=900, height=400)
        .interactive()
    )
    st.altair_chart(chart, use_container_width=True)

    # --- –¢–∞–±–ª–∏—Ü–∞ ---
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    table_style = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã:",
        ("–û–±—ã—á–Ω–∞—è", "–° –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"),
        horizontal=True,
    )

    if table_style == "–û–±—ã—á–Ω–∞—è":
        st.dataframe(df, use_container_width=True)
    else:
        styled_df = df.style.background_gradient(cmap="YlGnBu")
        st.dataframe(styled_df, use_container_width=True)

    # --- –°–∫–∞—á–∞—Ç—å CSV ---
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "üì• –°–∫–∞—á–∞—Ç—å CSV", data=csv, file_name="forecast.csv", mime="text/csv"
    )

    # --- –°–∫–∞—á–∞—Ç—å Excel ---
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Forecast")
    st.download_button(
        "üìä –°–∫–∞—á–∞—Ç—å Excel",
        data=output.getvalue(),
        file_name="forecast.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

else:
    st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
