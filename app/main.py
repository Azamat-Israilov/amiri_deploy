import streamlit as st
import pandas as pd
import altair as alt
from io import BytesIO

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="Amiri Forecasting UI", layout="wide")

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.markdown(
    """
    <h1 style='text-align: center; color: #FF4B4B; font-size: 42px;'>
        üç¨ Amiri Forecasting Dashboard
    </h1>
    <p style='text-align: center; color: gray; font-size:18px;'>
        –§–∞–∫—Ç vs –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –∫–æ–Ω—Ñ–µ—Ç + –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏
    </p>
    """,
    unsafe_allow_html=True,
)


# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
@st.cache_data
def load_data():
    forecast_df = pd.read_excel("forecast_data.xlsx")
    metrics_df = pd.read_excel("model_metrics.xlsx")
    return forecast_df, metrics_df


forecast_df, metrics_df = load_data()

# --- –§–∏–ª—å—Ç—Ä—ã ---
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
products = forecast_df["product_name"].dropna().unique().tolist()
regions = forecast_df["region"].dropna().unique().tolist()

product = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", products)
region = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", regions)
days = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 90, 30)

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
df_filtered = forecast_df[
    (forecast_df["product_name"] == product) & (forecast_df["region"] == region)
].copy()

df_filtered = df_filtered.sort_values("date")
if len(df_filtered) > days:
    df_filtered = df_filtered.tail(days)

# --- –ì—Ä–∞—Ñ–∏–∫ ---
st.subheader(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ vs –§–∞–∫—Ç: {product} ({region})")

df_melted = df_filtered.melt(
    "date", value_vars=["y", "yhat"], var_name="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", value_name="–ó–Ω–∞—á–µ–Ω–∏–µ"
)

chart = (
    alt.Chart(df_melted)
    .mark_line(point=True)
    .encode(
        x=alt.X("date:T", title="–î–∞—Ç–∞"),
        y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–ü—Ä–æ–¥–∞–∂–∏"),
        color=alt.Color("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:N", legend=alt.Legend(title="–õ–∏–Ω–∏–∏")),
        tooltip=["date:T", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:N", "–ó–Ω–∞—á–µ–Ω–∏–µ:Q"],
    )
    .properties(width=900, height=400)
    .interactive()
)

# –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≥–Ω–æ–∑–∞, –Ω–∞—Ä–∏—Å—É–µ–º "–ø–æ–ª–æ—Å—É"
if "yhat_lower" in df_filtered.columns and "yhat_upper" in df_filtered.columns:
    band = (
        alt.Chart(df_filtered)
        .mark_area(opacity=0.2, color="orange")
        .encode(x="date:T", y="yhat_lower:Q", y2="yhat_upper:Q")
    )
    chart = band + chart

st.altair_chart(chart, use_container_width=True)

# --- –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö ---
st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
styled_df = df_filtered.style.background_gradient(cmap="YlGnBu")
st.dataframe(styled_df, use_container_width=True)

# --- –°–∫–∞—á–∞—Ç—å CSV ---
csv = df_filtered.to_csv(index=False).encode("utf-8")
st.download_button(
    "üì• –°–∫–∞—á–∞—Ç—å CSV",
    data=csv,
    file_name=f"{product}_{region}_forecast.csv",
    mime="text/csv",
)

# --- –°–∫–∞—á–∞—Ç—å Excel ---
output = BytesIO()
with pd.ExcelWriter(output, engine="openpyxl") as writer:
    df_filtered.to_excel(writer, index=False, sheet_name="Forecast")
st.download_button(
    "üìä –°–∫–∞—á–∞—Ç—å Excel",
    data=output.getvalue(),
    file_name=f"{product}_{region}_forecast.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
)

# --- –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ ---
st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
metrics_filtered = metrics_df[
    (metrics_df["product_name"] == product) & (metrics_df["region"] == region)
]

if not metrics_filtered.empty:
    st.dataframe(metrics_filtered, use_container_width=True)
else:
    st.info("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
